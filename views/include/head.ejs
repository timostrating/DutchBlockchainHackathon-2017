<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="utf-8">
		<meta http-equiv="X-UA-Compatible" content="IE=edge">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<meta name="description" content="">
		<meta name="author" content="uu-team">
		<title>BECCA</title>

		<link href='http://fonts.googleapis.com/css?family=Open+Sans' rel='stylesheet' type='text/css' />
		<link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
		<link rel="stylesheet" href="https://code.getmdl.io/1.3.0/material.indigo-pink.min.css">
		<script defer src="https://code.getmdl.io/1.3.0/material.min.js"></script>

		<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css" integrity="sha384-rwoIResjU2yc3z8GV/NPeZWAv56rSmLldC3R/AZzGRnGxQQKnKkoFVhFQhNUwEyJ" crossorigin="anonymous">
		<link href="Conf/css/carousel.css" rel="stylesheet" />
		<link href="Conf/css/font-awesome.min.css" rel="stylesheet" />
		<script type="text/javascript" src="/dist/web3.js"></script>
		<script type="text/javascript">

		var Web3 = require('web3');
		var web3 = new Web3();
		web3.setProvider(new web3.providers.HttpProvider("http://localhost:8545"));

		// solidity code code
		var source = "" +
		"contract test {\n" +
		"   function take(uint[] a, uint b) constant returns(uint d) {\n" +
		"       return a[b];\n" +
		"   }\n" +
		"}\n";

		var compiled = web3.eth.compile.solidity(source);
		var code = compiled.code;
		// contract json abi, this is autogenerated using solc CLI
		var abi = compiled.info.abiDefinition;

		var myContract;

		function createExampleContract() {
		    // hide create button
		    document.getElementById('create').style.visibility = 'hidden'; 
		    document.getElementById('code').innerText = code;

		    // let's assume that coinbase is our account
		    web3.eth.defaultAccount = web3.eth.coinbase;

		    // create contract
		    document.getElementById('status').innerText = "transaction sent, waiting for confirmation";
		    web3.eth.contract(abi).new({data: code}, function (err, contract) {
		        if (err) {
		            console.error(err);
		            return;

		        // callback fires twice, we only want the second call when the contract is deployed
		        } else if(contract.address){

		            myContract = contract;
		            console.log('address: ' + myContract.address);

		            document.getElementById('status').innerText = 'Mined!';
		            document.getElementById('call').style.visibility = 'visible';
		        }
		    });
		}

		function callExampleContract() {
		    // this should be generated by ethereum
		    var param = parseInt(document.getElementById('value').value);

		    // call the contract
		    var res = myContract.take([0,6,5,2,1,5,6], param);
		    document.getElementById('result').innerText = res.toString(10);
		}

</script>

<style>
.nav-link {
	margin-left: 10px;
	margin-right: 10px;
}

.img-fluid {
	max-height: 100vh;
	width: 100% !important;
}

</style>

		</head>
	<body>
